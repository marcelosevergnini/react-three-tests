{"version":3,"sources":["serviceWorker.js","components/container/Footer.tsx","components/container/Header.tsx","builders/AppScene.ts","components/engine/Engine.tsx","components/container/Content.tsx","components/container/HomePage.tsx","index.js"],"names":["Boolean","window","location","hostname","match","Footer","className","href","Header","AppScene","useAntialias","color","scene","renderer","camera","controls","updateRenderSize","width","height","updateStyle","setSize","aspect","updateProjectionMatrix","addLights","lights","forEach","light","directionalLight","DirectionalLight","Color","position","set","x","y","z","normalize","add","addGrid","grid","GridHelper","size","dimensions","elementToAdd","updateControls","render","this","Scene","background","WebGLRenderer","antialias","PerspectiveCamera","lookAt","OrbitControls","addEventListener","style","Engine","props","containerRef","componentDidMount","backgroundColor","appendChild","domElement","offsetWidth","offsetHeight","setState","animate","requestAnimationFrame","resizeCanvas","onDocumentMouseMove","event","preventDefault","mousePos","clientX","clientY","ref","React","createRef","state","Component","Content","HomePage","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03362a00.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <section className=\"footer\">\n            <div className=\"content has-text-centered\">\n                <p>\n                    <strong>Playground</strong> by <a href=\"https://github.com/marcelosevergnini\">Marcelo Severgnini</a>\n                    <strong> Have Fun</strong>\n                </p>\n            </div>\n        </section>\n    );\n}\n\nexport default Footer;","import React from \"react\";\n\nfunction Header() {\n    return (\n        <section className=\"hero is-primary\">\n            <div className=\"hero-body\">\n                <div className=\"container\">\n                    <h1 className=\"title\">\n                        My Playground\n                    </h1>\n                    <h2 className=\"subtitle\">\n                        Primary subtitle\n                    </h2>\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default Header;","import {Scene, WebGLRenderer, Color, DirectionalLight, PerspectiveCamera, GridHelper} from \"three\";\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nclass AppScene {\n    scene: Scene;\n    renderer: WebGLRenderer;\n    camera: PerspectiveCamera;\n    controls: OrbitControls;\n\n    constructor(useAntialias: boolean, color: number) {\n        this.scene = new Scene();\n        this.scene.background = new Color(color);\n        this.renderer = new WebGLRenderer({ antialias: useAntialias });\n        this.camera = new PerspectiveCamera( 45, 800 / 600, 1, 10000 );\n        this.renderer.setSize(0, 0, false);\n        this.camera.position.set( 500, 800, 1300 );\n        this.camera.lookAt( 0, 0, 0 );\n        this.controls = new OrbitControls(this.camera);\n        this.controls.addEventListener( 'change', this.updateControls);\n    };\n\n    updateRenderSize = (width: number, height: number, updateStyle: boolean ) => {\n        this.renderer.setSize(width, height, updateStyle);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n    };\n\n    addLights = (lights: {color: number, position : { x: number, y: number, z: number}}[]) => {\n        lights.forEach((light: {color: number, position : { x: number, y: number, z: number}}) => {\n            let directionalLight = new DirectionalLight( new Color(light.color));\n            directionalLight.position.set(light.position.x, light.position.y , light.position.z).normalize();\n            this.scene.add(directionalLight);\n        });\n    };\n\n    addGrid = (grid: {size: number, dimensions: number }) => {\n        this.add(new GridHelper(grid.size, grid.dimensions ));\n    };\n\n    add = (elementToAdd: any) => {\n        this.scene.add(elementToAdd);\n    };\n\n    updateControls = () => {\n        this.renderer.render( this.scene,  this.camera);\n    };\n\n    render = () => {\n        this.renderer.render( this.scene, this.camera );\n    };\n}\nexport default AppScene;\n","import React, { Component } from 'react';\nimport AppScene from \"../../builders/AppScene\";\n\nconst style = {\n    width: \"calc(97vw)\",\n    height: \"calc(70vh)\"\n};\n\ninterface EngineProps {\n    backgroundColor: number,\n    lights: {color: number, position: {x: number, y: number, z: number}}[],\n    grid: {size: number, dimensions: number }\n}\n\nexport class Engine extends Component<EngineProps> {\n    containerRef: any;\n    props: EngineProps;\n    scene: AppScene;\n\n    constructor(props: EngineProps) {\n        super(props);\n        this.props = props;\n        this.containerRef = React.createRef();\n        this.state = {width: 0, height: 0, mousePos: {x: 0,y: 0}};\n        window.addEventListener(\"resize\", this.resizeCanvas, true);\n        window.addEventListener('mousemove', this.onDocumentMouseMove);\n\n    }\n\n    componentDidMount = () => {\n        this.scene = new AppScene(false, this.props.backgroundColor);\n        this.containerRef.appendChild(this.scene.renderer.domElement);\n        const {offsetWidth, offsetHeight} = this.containerRef;\n        this.setState({width: offsetWidth, height: offsetHeight});\n        this.scene.updateRenderSize(offsetWidth, offsetHeight, true);\n        this.scene.addLights(this.props.lights);\n        this.scene.addGrid(this.props.grid);\n        this.animate();\n    };\n\n    animate = () => {\n        window.requestAnimationFrame(this.animate);\n        this.scene.render();\n    };\n\n    resizeCanvas = () => {\n        const {offsetWidth, offsetHeight} = this.containerRef;\n        this.scene.updateRenderSize(offsetWidth, offsetHeight, true);\n        this.setState({width: offsetWidth, height: offsetHeight});\n    };\n\n    onDocumentMouseMove = (event: MouseEvent) => {\n        event.preventDefault();\n        this.setState(() => {\n            return {mousePos: {\n                x: ((event.clientX / this.containerRef.offsetWidth) * 2 - 1),\n                y: (-(event.clientY / this.containerRef.offsetHeight) * 2 + 1)\n            }}\n        });\n    };\n\n    render = () => {\n        return (\n            <div style={style} ref={ref => (this.containerRef = ref)} />\n        )\n    }\n}\n","import React from \"react\";\nimport {Engine} from \"../engine/Engine\";\n\nfunction Content() {\n    return (\n        <div className=\"container is-fluid\">\n           <Engine backgroundColor={0xd9d9d9} lights={[{color: 0xffffff, position: { x: 1, y: 0.75, z: 0.5 }}]} grid={{ size: 1000, dimensions: 50 }}/>\n        </div>\n    );\n}\n\nexport default Content;\n","import React from \"react\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\n\nfunction HomePage() {\n    return (\n        <div>\n            <Header />\n            <Content />\n            <Footer />\n        </div>\n    );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.css'\nimport * as serviceWorker from './serviceWorker';\nimport HomePage from \"./components/container/HomePage\";\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}